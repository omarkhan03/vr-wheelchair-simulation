//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.1
//     from Assets/Scenes/WheelchairInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @WheelchairInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @WheelchairInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""WheelchairInputActions"",
    ""maps"": [
        {
            ""name"": ""WheelchairControls"",
            ""id"": ""23ca4b2b-e3d7-41bc-aa62-92807bbe23d4"",
            ""actions"": [
                {
                    ""name"": ""LeftWheelForward"",
                    ""type"": ""Button"",
                    ""id"": ""dcdeb56d-b825-454b-9d74-1f4fe0c43299"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightWheelForward"",
                    ""type"": ""Button"",
                    ""id"": ""7184e4db-facb-46c6-88a6-458bc7f5dc43"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightWheelBackward"",
                    ""type"": ""Button"",
                    ""id"": ""71acc886-e028-4b09-ad9c-b95da1634a59"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftWheelBackward"",
                    ""type"": ""Button"",
                    ""id"": ""72743f08-d8f8-4dde-af49-2266dda5671c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Button"",
                    ""id"": ""d30a972a-f91b-4354-b3f2-e504a7315cda"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc7795be-d760-4212-972e-012a4ded0cca"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWheelForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83c07c7e-c8a0-4731-9ff9-fac4917a05a0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWheelForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb1bba0-0ef1-4ff2-b6d9-2cae7c1e9983"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightWheelBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3658e9f1-c3cc-4954-aaf6-00b4f8419e6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftWheelBackward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ccf7064-368b-4c6e-bfb8-b52243fb6830"",
                    ""path"": ""<OculusTouchController>/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR"",
            ""id"": ""c6151c5c-45ab-4a3d-8e74-53ada4d48883"",
            ""actions"": [
                {
                    ""name"": ""RightGrip"",
                    ""type"": ""Button"",
                    ""id"": ""23c0a4f9-903e-414b-938c-3f033aafaa89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftGrip"",
                    ""type"": ""Button"",
                    ""id"": ""f0b03edb-16c1-4247-9994-e3024119b08c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b1fedf4f-4692-4f54-990d-916099a1e967"",
                    ""path"": ""<XRController>{RightHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d607909-be26-4e18-a07e-dcbaa7e0196c"",
                    ""path"": ""<XRController>{LeftHand}/{GripButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftGrip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // WheelchairControls
        m_WheelchairControls = asset.FindActionMap("WheelchairControls", throwIfNotFound: true);
        m_WheelchairControls_LeftWheelForward = m_WheelchairControls.FindAction("LeftWheelForward", throwIfNotFound: true);
        m_WheelchairControls_RightWheelForward = m_WheelchairControls.FindAction("RightWheelForward", throwIfNotFound: true);
        m_WheelchairControls_RightWheelBackward = m_WheelchairControls.FindAction("RightWheelBackward", throwIfNotFound: true);
        m_WheelchairControls_LeftWheelBackward = m_WheelchairControls.FindAction("LeftWheelBackward", throwIfNotFound: true);
        m_WheelchairControls_RightGrip = m_WheelchairControls.FindAction("RightGrip", throwIfNotFound: true);
        // VR
        m_VR = asset.FindActionMap("VR", throwIfNotFound: true);
        m_VR_RightGrip = m_VR.FindAction("RightGrip", throwIfNotFound: true);
        m_VR_LeftGrip = m_VR.FindAction("LeftGrip", throwIfNotFound: true);
    }

    ~@WheelchairInputActions()
    {
        Debug.Assert(!m_WheelchairControls.enabled, "This will cause a leak and performance issues, WheelchairInputActions.WheelchairControls.Disable() has not been called.");
        Debug.Assert(!m_VR.enabled, "This will cause a leak and performance issues, WheelchairInputActions.VR.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // WheelchairControls
    private readonly InputActionMap m_WheelchairControls;
    private List<IWheelchairControlsActions> m_WheelchairControlsActionsCallbackInterfaces = new List<IWheelchairControlsActions>();
    private readonly InputAction m_WheelchairControls_LeftWheelForward;
    private readonly InputAction m_WheelchairControls_RightWheelForward;
    private readonly InputAction m_WheelchairControls_RightWheelBackward;
    private readonly InputAction m_WheelchairControls_LeftWheelBackward;
    private readonly InputAction m_WheelchairControls_RightGrip;
    public struct WheelchairControlsActions
    {
        private @WheelchairInputActions m_Wrapper;
        public WheelchairControlsActions(@WheelchairInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftWheelForward => m_Wrapper.m_WheelchairControls_LeftWheelForward;
        public InputAction @RightWheelForward => m_Wrapper.m_WheelchairControls_RightWheelForward;
        public InputAction @RightWheelBackward => m_Wrapper.m_WheelchairControls_RightWheelBackward;
        public InputAction @LeftWheelBackward => m_Wrapper.m_WheelchairControls_LeftWheelBackward;
        public InputAction @RightGrip => m_Wrapper.m_WheelchairControls_RightGrip;
        public InputActionMap Get() { return m_Wrapper.m_WheelchairControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WheelchairControlsActions set) { return set.Get(); }
        public void AddCallbacks(IWheelchairControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_WheelchairControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WheelchairControlsActionsCallbackInterfaces.Add(instance);
            @LeftWheelForward.started += instance.OnLeftWheelForward;
            @LeftWheelForward.performed += instance.OnLeftWheelForward;
            @LeftWheelForward.canceled += instance.OnLeftWheelForward;
            @RightWheelForward.started += instance.OnRightWheelForward;
            @RightWheelForward.performed += instance.OnRightWheelForward;
            @RightWheelForward.canceled += instance.OnRightWheelForward;
            @RightWheelBackward.started += instance.OnRightWheelBackward;
            @RightWheelBackward.performed += instance.OnRightWheelBackward;
            @RightWheelBackward.canceled += instance.OnRightWheelBackward;
            @LeftWheelBackward.started += instance.OnLeftWheelBackward;
            @LeftWheelBackward.performed += instance.OnLeftWheelBackward;
            @LeftWheelBackward.canceled += instance.OnLeftWheelBackward;
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
        }

        private void UnregisterCallbacks(IWheelchairControlsActions instance)
        {
            @LeftWheelForward.started -= instance.OnLeftWheelForward;
            @LeftWheelForward.performed -= instance.OnLeftWheelForward;
            @LeftWheelForward.canceled -= instance.OnLeftWheelForward;
            @RightWheelForward.started -= instance.OnRightWheelForward;
            @RightWheelForward.performed -= instance.OnRightWheelForward;
            @RightWheelForward.canceled -= instance.OnRightWheelForward;
            @RightWheelBackward.started -= instance.OnRightWheelBackward;
            @RightWheelBackward.performed -= instance.OnRightWheelBackward;
            @RightWheelBackward.canceled -= instance.OnRightWheelBackward;
            @LeftWheelBackward.started -= instance.OnLeftWheelBackward;
            @LeftWheelBackward.performed -= instance.OnLeftWheelBackward;
            @LeftWheelBackward.canceled -= instance.OnLeftWheelBackward;
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
        }

        public void RemoveCallbacks(IWheelchairControlsActions instance)
        {
            if (m_Wrapper.m_WheelchairControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWheelchairControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_WheelchairControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WheelchairControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WheelchairControlsActions @WheelchairControls => new WheelchairControlsActions(this);

    // VR
    private readonly InputActionMap m_VR;
    private List<IVRActions> m_VRActionsCallbackInterfaces = new List<IVRActions>();
    private readonly InputAction m_VR_RightGrip;
    private readonly InputAction m_VR_LeftGrip;
    public struct VRActions
    {
        private @WheelchairInputActions m_Wrapper;
        public VRActions(@WheelchairInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightGrip => m_Wrapper.m_VR_RightGrip;
        public InputAction @LeftGrip => m_Wrapper.m_VR_LeftGrip;
        public InputActionMap Get() { return m_Wrapper.m_VR; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VRActions set) { return set.Get(); }
        public void AddCallbacks(IVRActions instance)
        {
            if (instance == null || m_Wrapper.m_VRActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRActionsCallbackInterfaces.Add(instance);
            @RightGrip.started += instance.OnRightGrip;
            @RightGrip.performed += instance.OnRightGrip;
            @RightGrip.canceled += instance.OnRightGrip;
            @LeftGrip.started += instance.OnLeftGrip;
            @LeftGrip.performed += instance.OnLeftGrip;
            @LeftGrip.canceled += instance.OnLeftGrip;
        }

        private void UnregisterCallbacks(IVRActions instance)
        {
            @RightGrip.started -= instance.OnRightGrip;
            @RightGrip.performed -= instance.OnRightGrip;
            @RightGrip.canceled -= instance.OnRightGrip;
            @LeftGrip.started -= instance.OnLeftGrip;
            @LeftGrip.performed -= instance.OnLeftGrip;
            @LeftGrip.canceled -= instance.OnLeftGrip;
        }

        public void RemoveCallbacks(IVRActions instance)
        {
            if (m_Wrapper.m_VRActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVRActions instance)
        {
            foreach (var item in m_Wrapper.m_VRActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VRActions @VR => new VRActions(this);
    public interface IWheelchairControlsActions
    {
        void OnLeftWheelForward(InputAction.CallbackContext context);
        void OnRightWheelForward(InputAction.CallbackContext context);
        void OnRightWheelBackward(InputAction.CallbackContext context);
        void OnLeftWheelBackward(InputAction.CallbackContext context);
        void OnRightGrip(InputAction.CallbackContext context);
    }
    public interface IVRActions
    {
        void OnRightGrip(InputAction.CallbackContext context);
        void OnLeftGrip(InputAction.CallbackContext context);
    }
}
